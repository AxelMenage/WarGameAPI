/* Utilisateurs */
CREATE TABLE USER_US (
	US_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	US_EMAIL VARCHAR(64) NOT NULL,
	US_NICKNAME VARCHAR(64) NOT NULL,
	US_PASSWORD VARCHAR(64) NULL,
	US_POINTS INT NOT NULL,
	CONSTRAINT AK_US_EMAIL UNIQUE (US_EMAIL),
	CONSTRAINT AK_US_NICKNAME UNIQUE (US_NICKNAME)
);
INSERT INTO USER_US (US_EMAIL, US_NICKNAME, US_POINTS) VALUES ('ia@hotmail.fr', 'IA', 0);

/* Amis - Relations entre les utilisateurs */
CREATE TABLE FRIENDS_FR (
	FR_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	US_ID1 INT NOT NULL,
	US_ID2 INT NOT NULL,
	FR_INDEMAND BIT NOT NULL DEFAULT 1,
	CONSTRAINT AK_US_ID UNIQUE (US_ID1, US_ID2),
	CONSTRAINT FK_FRIENDS_USER1 FOREIGN KEY (US_ID1) REFERENCES USER_US(US_ID) ON DELETE NO ACTION,
	CONSTRAINT FK_FRIENDS_USER2 FOREIGN KEY (US_ID2) REFERENCES USER_US(US_ID) ON DELETE NO ACTION
);

/* Types de parties */
CREATE TABLE GAME_TYPE_GT (
	GT_ID TINYINT NOT NULL PRIMARY KEY,
	GT_NAME VARCHAR(64) NOT NULL,
	CONSTRAINT AK_GT_NAME UNIQUE (GT_NAME)
);
INSERT INTO GAME_TYPE_GT (GT_ID, GT_NAME) VALUES (1, 'Classic');
INSERT INTO GAME_TYPE_GT (GT_ID, GT_NAME) VALUES (2, 'Cards');

/* Decks personnalisables par utilisateur */
CREATE TABLE DECK_DE (
	DE_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	DE_NAME VARCHAR(64) NOT NULL,
	US_ID INT NOT NULL,
	CONSTRAINT FK_DECK_USER FOREIGN KEY (US_ID) REFERENCES USER_US(US_ID) ON DELETE CASCADE
);

/* Cartes */
CREATE TABLE CARD_CA (
	CA_ID TINYINT NOT NULL PRIMARY KEY,
	CA_NAME VARCHAR(64) NOT NULL,
	CA_DESCRIPTION VARCHAR(255) NOT NULL
);
INSERT INTO CARD_CA (CA_ID, CA_NAME, CA_DESCRIPTION) VALUES (1, 'Shot', 'Choose 1 position to shot.');
INSERT INTO CARD_CA (CA_ID, CA_NAME, CA_DESCRIPTION) VALUES (2, 'Bomb', 'Choose 1 position to shot, if you touch a ship, it is destroyed.');
INSERT INTO CARD_CA (CA_ID, CA_NAME, CA_DESCRIPTION) VALUES (3, 'Scan', 'Reveal a coordinate of an ennemy ship.');
INSERT INTO CARD_CA (CA_ID, CA_NAME, CA_DESCRIPTION) VALUES (4, 'Repair', 'Choose 1 of your endommaged ship, remove all damage.');
INSERT INTO CARD_CA (CA_ID, CA_NAME, CA_DESCRIPTION) VALUES (5, 'Camouflage', 'Block ennemy scan for 5 turns.');
INSERT INTO CARD_CA (CA_ID, CA_NAME, CA_DESCRIPTION) VALUES (6, 'Shield', 'Choose 1 of your ship, it is untouchable for 5 turns (but it can be detected).');
INSERT INTO CARD_CA (CA_ID, CA_NAME, CA_DESCRIPTION) VALUES (7, 'Reload', 'Discard your hand and draw 5 cards.');
INSERT INTO CARD_CA (CA_ID, CA_NAME, CA_DESCRIPTION) VALUES (8, 'Multishot', 'Choose 3 positions to shot. Your ennemy plays 2 turns.');

/* Nombre de cartes de chaque type dans les decks perso */
CREATE TABLE DECK_CARDS_DC (
	DE_ID INT NOT NULL,
	CA_ID TINYINT NOT NULL,
	DC_NB INT NOT NULL,
	CONSTRAINT AK_DE_CA_ID UNIQUE (DE_ID, CA_ID),
	CONSTRAINT FK_DECK_CARDS_DECK FOREIGN KEY (DE_ID) REFERENCES DECK_DE(DE_ID) ON DELETE CASCADE,
	CONSTRAINT FK_DECK_CARDS_CARD FOREIGN KEY (CA_ID) REFERENCES CARD_CA(CA_ID) ON DELETE CASCADE
);

/* Etats de la partie */
CREATE TABLE GAME_STATE_GS (
	GS_ID TINYINT NOT NULL PRIMARY KEY,
	GS_NAME VARCHAR(255) NOT NULL
);
INSERT INTO GAME_STATE_GS (GS_ID, GS_NAME) VALUES (1, 'Waiting for acceptance');
INSERT INTO GAME_STATE_GS (GS_ID, GS_NAME) VALUES (2, 'Waiting for placements');
INSERT INTO GAME_STATE_GS (GS_ID, GS_NAME) VALUES (3, 'In progress');
INSERT INTO GAME_STATE_GS (GS_ID, GS_NAME) VALUES (4, 'Finished');
INSERT INTO GAME_STATE_GS (GS_ID, GS_NAME) VALUES (5, 'Duspended');


/* Deck relatif à la partie */
CREATE TABLE INGAME_DECK_IND (
	IND_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	IND_NB_CARDS INT NOT NULL,
);

/* Cartes du deck relatif à la partie */
CREATE TABLE INGAME_DECK_CARDS_INC (
	INC_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	IND_ID INT NOT NULL,
	CA_ID TINYINT NOT NULL,
	CONSTRAINT FK_INGAME_DECK_GAME FOREIGN KEY (IND_ID) REFERENCES INGAME_DECK_IND(IND_ID) ON DELETE CASCADE,
	CONSTRAINT FK_INGAME_DECK_CARDS_CARD FOREIGN KEY (CA_ID) REFERENCES CARD_CA(CA_ID) ON DELETE CASCADE
);

/* Infos de la partie */
CREATE TABLE GAME_GA (
	GA_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	GT_ID TINYINT NOT NULL,
	GS_ID TINYINT NOT NULL,
	US_ID_PLAYER1 INT NOT NULL,
	US_ID_PLAYER2 INT NULL,
	GA_POS_PLAYER1_OK BIT NOT NULL DEFAULT 0,
	GA_POS_PLAYER2_OK BIT NOT NULL DEFAULT 0,
	US_ID_PLAYER_TURN INT NOT NULL,
	GA_WINNER INT NULL,
	GA_NB_TURN INT NOT NULL,
	IND_ID INT NULL,
	GA_STARTDATE DATETIME NOT NULL DEFAULT GETDATE(),
	GA_ENDDATE DATETIME DEFAULT NULL,
	CONSTRAINT FK_GAME_GAME_STATE FOREIGN KEY (GS_ID) REFERENCES GAME_STATE_GS(GS_ID) ON DELETE CASCADE,
	CONSTRAINT FK_GAME_INGAME_DECK FOREIGN KEY (IND_ID) REFERENCES INGAME_DECK_IND(IND_ID) ON DELETE CASCADE
);

/* Messages du tchat de la partie */
CREATE TABLE MESSAGE_ME (
	ME_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	GA_ID INT NOT NULL,
	ME_CONTENT TEXT NOT NULL,
	US_ID_SENDER INT NOT NULL
	CONSTRAINT FK_MESSAGE_USER1 FOREIGN KEY (US_ID_SENDER) REFERENCES USER_US(US_ID) ON DELETE CASCADE,
	CONSTRAINT FK_MESSAGE_GAME FOREIGN KEY (GA_ID) REFERENCES GAME_GA(GA_ID) ON DELETE CASCADE
);

/* Tirs effectués par les joueurs */
CREATE TABLE SHOT_SH (
	SH_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	GA_ID INT NOT NULL,
	US_ID INT NOT NULL,
	SH_COORD_X INT NOT NULL,
	SH_COORD_Y INT NOT NULL,
	CONSTRAINT FK_SHOT_USER FOREIGN KEY (US_ID) REFERENCES USER_US(US_ID) ON DELETE CASCADE,
	CONSTRAINT FK_SHOT_GAME FOREIGN KEY (GA_ID) REFERENCES GAME_GA(GA_ID) ON DELETE CASCADE
);

/* Vaisseaux disponibles */
CREATE TABLE SHIP_SHI (
	SHI_ID TINYINT NOT NULL PRIMARY KEY,
	SHI_NAME VARCHAR(64) NOT NULL,
	SHI_SIZE_X INT NOT NULL,
	SHI_SIZE_Y INT NOT NULL
);
INSERT INTO SHIP_SHI (SHI_ID, SHI_NAME, SHI_SIZE_X, SHI_SIZE_Y) VALUES (1, 'Carrier', 5, 2);
INSERT INTO SHIP_SHI (SHI_ID, SHI_NAME, SHI_SIZE_X, SHI_SIZE_Y) VALUES (2, 'Battleship', 4, 1);
INSERT INTO SHIP_SHI (SHI_ID, SHI_NAME, SHI_SIZE_X, SHI_SIZE_Y) VALUES (3, 'Destroyer', 3, 1);
INSERT INTO SHIP_SHI (SHI_ID, SHI_NAME, SHI_SIZE_X, SHI_SIZE_Y) VALUES (4, 'Submarine', 3, 1);
INSERT INTO SHIP_SHI (SHI_ID, SHI_NAME, SHI_SIZE_X, SHI_SIZE_Y) VALUES (5, 'Patrol Boat', 2, 1);

/* Etat des vaisseaux */
CREATE TABLE SHIP_STATE_SS (
	SS_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	GA_ID INT NOT NULL,
	US_ID INT NOT NULL,
	SHI_ID TINYINT NOT NULL,
	SS_LIFE INT NOT NULL,
	CONSTRAINT FK_SHIP_STATE_GAME FOREIGN KEY (GA_ID) REFERENCES GAME_GA(GA_ID) ON DELETE CASCADE,
	CONSTRAINT FK_SHIP_STATE_USER FOREIGN KEY (US_ID) REFERENCES USER_US(US_ID) ON DELETE CASCADE,
	CONSTRAINT FK_SHIP_STATE_SHIP FOREIGN KEY (SHI_ID) REFERENCES SHIP_SHI(SHI_ID) ON DELETE CASCADE
);

/* Position des vaisseaux */
CREATE TABLE POSITION_PO (
	PO_ID INT NOT NULL IDENTITY(1, 1) PRIMARY KEY,
	GA_ID INT NOT NULL,
	US_ID INT NOT NULL,
	SHI_ID TINYINT NOT NULL,
	PO_COORD_X INT NOT NULL,
	PO_COORD_Y INT NOT NULL,
	PO_TOUCHE BIT NOT NULL,
	CONSTRAINT FK_POSITION_USER FOREIGN KEY (US_ID) REFERENCES USER_US(US_ID) ON DELETE CASCADE,
	CONSTRAINT FK_POSITION_GAME FOREIGN KEY (GA_ID) REFERENCES GAME_GA(GA_ID) ON DELETE CASCADE,
	CONSTRAINT FK_POSITION_SHIP FOREIGN KEY (SHI_ID) REFERENCES SHIP_SHI(SHI_ID) ON DELETE CASCADE
);

CREATE VIEW USER_STATS
AS
SELECT US_ID, US_NICKNAME, 
(SELECT COUNT(GA_ID) FROM GAME_GA WHERE GA_WINNER = US_ID) as VICTORIES,
(SELECT COUNT(GA_ID) FROM GAME_GA WHERE (US_ID_PLAYER1 = US_ID OR US_ID_PLAYER2 = US_ID) AND GA_WINNER != US_ID) as DEFEATS
FROM USER_US US

CREATE VIEW GAMES
AS
SELECT GA_ID, GA.GS_ID, GS_NAME, US_ID_PLAYER1, US1.US_NICKNAME AS US_NICKNAME1, US_ID_PLAYER2, US2.US_NICKNAME AS US_NICKNAME2, 
GA_POS_PLAYER1_OK, GA_POS_PLAYER2_OK, US_ID_PLAYER_TURN, US3.US_NICKNAME AS US_NICKNAME3, GA_WINNER, US4.US_NICKNAME AS US_NICKNAME4, 
GA_NB_TURN, IND_ID, GA_STARTDATE, GA_ENDDATE
FROM GAME_GA GA
LEFT JOIN GAME_STATE_GS GS ON GA.GS_ID = GS.GS_ID
LEFT JOIN USER_US US1 ON US_ID_PLAYER1 = US1.US_ID
LEFT JOIN USER_US US2 ON US_ID_PLAYER2 = US2.US_ID
LEFT JOIN USER_US US3 ON US_ID_PLAYER_TURN = US3.US_ID
LEFT JOIN USER_US US4 ON GA_WINNER = US4.US_ID

CREATE VIEW FRIENDS
AS
SELECT FR_ID, US_ID1, US1.US_NICKNAME as NICKNAME1, US1.US_POINTS AS POINTS1, US_ID2, US2.US_NICKNAME AS NICKNAME2, US2.US_POINTS AS POINTS2, FR_INDEMAND
FROM FRIENDS_FR FR
LEFT JOIN USER_US US1 ON US_ID1 =  US1.US_ID
LEFT JOIN USER_US US2 ON US_ID2 =  US2.US_ID

/*
Scaffold-DbContext "Data Source=localhost\SQLEXPRESS;Initial Catalog=wargame;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -force -OutputDir Entities
*/